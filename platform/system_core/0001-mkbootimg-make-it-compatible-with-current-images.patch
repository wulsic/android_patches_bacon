From 558b02cd82d66b61447e7d254b3b66b3e374bde1 Mon Sep 17 00:00:00 2001
From: Hamster Tian <haotia@gmail.com>
Date: Fri, 26 Aug 2016 18:04:28 +0800
Subject: [PATCH 1/2] mkbootimg: make it compatible with current images

Change-Id: I27e01579d46efb1672373a0899446a51c680ca5d
---
 mkbootimg/mkbootimg | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/mkbootimg/mkbootimg b/mkbootimg/mkbootimg
index 5a13da2..add4746 100755
--- a/mkbootimg/mkbootimg
+++ b/mkbootimg/mkbootimg
@@ -16,11 +16,12 @@
 from __future__ import print_function
 from sys import argv, exit, stderr
 from argparse import ArgumentParser, FileType, Action
-from os import fstat
 from struct import pack
 from hashlib import sha1
 import sys
 import re
+import os
+from os import fstat
 
 def filesize(f):
     if f is None:
@@ -48,7 +49,7 @@ def pad_file(f, padding):
 def write_header(args):
     BOOT_MAGIC = 'ANDROID!'.encode()
     args.output.write(pack('8s', BOOT_MAGIC))
-    args.output.write(pack('10I',
+    args.output.write(pack('8I',
         filesize(args.kernel),                          # size in bytes
         args.base + args.kernel_offset,                 # physical load addr
         filesize(args.ramdisk),                         # size in bytes
@@ -56,9 +57,12 @@ def write_header(args):
         filesize(args.second),                          # size in bytes
         args.base + args.second_offset,                 # physical load addr
         args.base + args.tags_offset,                   # physical addr for kernel tags
-        args.pagesize,                                  # flash page size we assume
-        0,                                              # future expansion: MUST be 0
-        (args.os_version << 11) | args.os_patch_level)) # os version and patch level
+        args.pagesize))                                 # flash page size we assume
+    if args.dt:
+        args.output.write(pack('1I',
+            filesize(args.dt) if args.dt else 0))      # device tree size
+    args.output.write(pack('1I',
+        0))                                             # future expansion: MUST be 0
     args.output.write(pack('16s', args.board.encode())) # asciiz product name
     args.output.write(pack('512s', args.cmdline[:512].encode()))
 
@@ -66,6 +70,8 @@ def write_header(args):
     update_sha(sha, args.kernel)
     update_sha(sha, args.ramdisk)
     update_sha(sha, args.second)
+    if args.dt:
+        update_sha(sha, args.dt)
     img_id = pack('32s', sha.digest())
 
     args.output.write(img_id)
@@ -148,6 +154,7 @@ def parse_cmdline():
                         maxlen=16)
     parser.add_argument('--pagesize', help='page size', type=parse_int,
                         choices=[2**i for i in range(11,15)], default=2048)
+    parser.add_argument('--dt', help='device tree blob', type=FileType('rb'))
     parser.add_argument('--id', help='print the image ID on standard output',
                         action='store_true')
     parser.add_argument('-o', '--output', help='output file name', type=FileType('wb'),
@@ -159,7 +166,8 @@ def write_data(args):
     write_padded_file(args.output, args.kernel, args.pagesize)
     write_padded_file(args.output, args.ramdisk, args.pagesize)
     write_padded_file(args.output, args.second, args.pagesize)
-
+    if args.dt:
+        write_padded_file(args.output, args.dt, args.pagesize)
 
 def main():
     args = parse_cmdline()
-- 
2.1.4

